{"version":3,"sources":["index.js"],"names":["window","document","key","elementsId","elements","init","initDetailsToggle","hasClosed","event","preventDefault","element","index","querySelectorAll","attributes","length","setAttribute","removeAttribute","print","hidden","requestDetails","requestHeader","classList","showRequests","toggle","hideRequests","toggleDetails","currentTarget","dataReceived","this","readyState","status","data","item","elementIndex","getElementById","id","getElementsByClassName","decryptCodes","text","link","href","displayData","JSON","parse","responseText","content","passcode","calAscii","atob","result","charCodeAt","String","fromCharCode","details","addEventListener","printDocument","toggleAllDetails","today","textContent","getDate","toggleRequests","now","slice","getMonth","getFullYear","initElements","detailsElement","createElement","open","xhttp","XMLHttpRequest","requestData","onreadystatechange","error"],"mappings":"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","file":"index.js","sourcesContent":["(function (window, document) {\r\n    const key = '323925712C8B49E48C00EBA72486203D',\r\n        elementsId = [\r\n            'details',\r\n            'print',\r\n            'today',\r\n            'requestHeader',\r\n            'requestDetails',\r\n            'showRequests',\r\n            'hideRequests'\r\n        ],\r\n        elements = {};\r\n\r\n    init();\r\n\r\n    function init() {\r\n        try {\r\n            initElements();\r\n            initDetailsToggle();\r\n            requestData();\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    function initElements() {\r\n        let index, id;\r\n        for (index = 0; index < elementsId.length; index++) {\r\n            id = elementsId[index];\r\n            elements[id] = document.getElementById(id);\r\n        }\r\n\r\n        elements.details.addEventListener('click', toggleAllDetails, false);\r\n        elements.print.addEventListener('click', printDocument, false);\r\n        elements.showRequests.addEventListener('click', toggleRequests, false);\r\n        elements.hideRequests.addEventListener('click', toggleRequests, false);\r\n        if (elements.today) {\r\n            const now = new Date();\r\n            elements.today.textContent = `(au ${('0' + now.getDate()).slice(-2)}/${('0' + (now.getMonth() + 1)).slice(-2)}/${now.getFullYear()})`;\r\n        }\r\n    }\r\n\r\n    function toggleAllDetails(event) {\r\n        event.preventDefault && event.preventDefault();\r\n\r\n        const elements = document.querySelectorAll('details');\r\n        let index = -1, element, hasClosed = false;\r\n        while (!hasClosed && ++index < elements.length) {\r\n            element = elements[index];\r\n            hasClosed = !element.attributes['open'];\r\n        }\r\n\r\n        if (hasClosed) {\r\n            while (index < elements.length) {\r\n                element = elements[index];\r\n                if (!element.attributes['open']) {\r\n                    element.setAttribute('open', '');\r\n                }\r\n\r\n                index++\r\n            }\r\n        } else {\r\n            index = 0;\r\n            while (index < elements.length) {\r\n                element = elements[index];\r\n                element.removeAttribute('open');\r\n                index++\r\n            }\r\n        }\r\n    }\r\n\r\n    function printDocument(event) {\r\n        event.preventDefault && event.preventDefault();\r\n        window.print();\r\n    }\r\n\r\n    function toggleRequests(event) {\r\n        event.preventDefault && event.preventDefault();\r\n        const hidden = elements.requestDetails.classList.toggle('hidden');\r\n        elements.requestHeader.classList.toggle('noprint', hidden);\r\n        elements.showRequests.classList.toggle('hidden', !hidden);\r\n        elements.hideRequests.classList.toggle('hidden', hidden);\r\n    }\r\n\r\n    function initDetailsToggle() {\r\n        const detailsElement = document.createElement('details');\r\n        if (detailsElement.open !== false && detailsElement.open !== true) {\r\n            const details = document.querySelectorAll('details');\r\n            let index;\r\n            for (index = 0; index < details.length; index++) {\r\n                details[index].addEventListener('click', toggleDetails, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleDetails(event) {\r\n        const openAttribute = event.currentTarget.attributes['open'];\r\n        if (openAttribute) {\r\n            event.currentTarget.removeAttribute('open');\r\n        } else {\r\n            event.currentTarget.setAttribute('open', '');\r\n        }\r\n    }\r\n\r\n    function requestData() {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = dataReceived;\r\n        xhttp.open('GET', '/data.json', true);\r\n        xhttp.send();\r\n    }\r\n\r\n    function dataReceived() {\r\n        if (this.readyState == 4 && this.status == 200) {\r\n            const data = JSON.parse(this.responseText);\r\n            displayData(data);\r\n        }\r\n    }\r\n\r\n    function displayData(data) {\r\n        let index, item, elements, element, elementIndex;\r\n\r\n        for (index = 0; index < data.length; index++) {\r\n            item = data[index];\r\n            if (item.id) {\r\n                elements = [document.getElementById(item.id)];\r\n            } else if (item.class) {\r\n                elements = document.getElementsByClassName(item.class);\r\n            }\r\n\r\n            if (elements.length > 0) {\r\n                for (elementIndex = 0; elementIndex < elements.length; elementIndex++) {\r\n                    element = elements[elementIndex];\r\n                    if (element) {\r\n                        element.innerText = decryptCodes(item.text, key);\r\n\r\n                        if (item.link) {\r\n                            element.href = decryptCodes(item.link, key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function decryptCodes(content, passcode) {\r\n        const data = atob(content);\r\n        let index, calAscii, result = '';\r\n\r\n        for (index = 0; index < data.length; index++) {\r\n            calAscii = (data.charCodeAt(index) - passcode.charCodeAt(index % passcode.length));\r\n            result += String.fromCharCode(calAscii);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function encryptCodes(content, passcode) {\r\n        let index, calAscii, result = '';\r\n        for (index = 0; index < content.length; index++) {\r\n            calAscii = (content.charCodeAt(index) + passcode.charCodeAt(index % passcode.length));\r\n            result += String.fromCharCode(calAscii);\r\n        }\r\n\r\n        return btoa(result);\r\n    }\r\n\r\n})(window, document);"]}